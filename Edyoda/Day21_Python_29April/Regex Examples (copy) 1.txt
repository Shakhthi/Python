1.
import re

pattern = '^a...s$'-start with a ends with s
and total 5 characters
test_string = 'abyss'
result = re.match(pattern, test_string)

if result:
  print("Search successful.")
else:
  print("Search unsuccessful.")	

2.
Expression	String	Matched?
^a...s$
abs-No match
alias	Match
abyssss	Match
Alias	No match
An abacus	No match
3.

[] - Square brackets

Square brackets specifies a set of 
characters you wish to match.

Expression	String	Matched?
[abc]	a	1 match
ac	2 matches
Hey Jude	No match
abc de ca	5 matches

4.
You can also specify a range of 
characters using - inside square 
brackets.

[a-e] is the same as [abcde].
[1-4] is the same as [1234].
[0-39] is the same as [01239].
You can complement (invert) the 
character set by using caret ^ 
symbol at the start of a square-bracket.

[^abc] means any character except a or b or c.
[^0-9] means any non-digit character.

5.
. - Period

A period matches any 
single character (except newline '\n').

Expression	String	Matched?
..	a	No match
ac	1 match
acd	1 match
acde	2 matches (contains 4 characters)

6.

^ - Caret

The caret symbol ^ is used to check 
if a string starts with a certain 
character.

Expression	String	Matched?
^a	
a	1 match
abc	1 match
bac	No match
^ab	abc	1 match
acb	No match (starts with a but not followed by b)

7.
$ - Dollar

The dollar symbol $ is used to check if a string ends with a certain character.

Expression	String	Matched?
a$	
a	1 match
formula	1 match
cab	No match

8.
* - Star

The star symbol * matches zero or more occurrences of the pattern left to it.

Expression	String	Matched?
ma*n	
mn	1 match
man	1 match
maaan	1 match
main	No match (a is not followed by n)
woman	1 match

9.

+ - Plus

The plus symbol + matches one or more occurrences of the pattern left to it.

Expression	String	Matched?
ma+n	mn	No match (no a character)
man	1 match
maaan	1 match
main	No match (a is not followed by n)
woman	1 match

10.

? - Question Mark

The question mark symbol ? matches zero or one occurrence of the pattern left to it.

Expression	String	Matched?
ma?n	mn	1 match
man	1 match
maaan	No match (more than one a character)
main	No match (a is not followed by n)
woman	1 match

11.
? - Question Mark

The question mark symbol ? matches zero or one occurrence of the pattern left to it.

Expression	String	Matched?
ma?n	mn	1 match
man	1 match
maaan	No match (more than one a character)
main	No match (a is not followed by n)
woman	1 match

12.
{} - Braces

Consider this code: {n,m}. 
This means at least n, and at most m 
repetitions of the pattern left to it.

Expression	String	Matched?
a{2,3}	
abc dat	No match
abc daat	1 match (at daat)
aabc daaat	2 matches (at aabc and daaat)
aabc daaaat	2 matches (at aabc and daaaat)
13.
[0-9]{2,4}	

ab123csde	1 match (match at ab123csde)
12 and 345673	3 matches (12, 3456, 73)
1 and 2	No match


14.
| - Alternation

Vertical bar | is used for alternation (or operator).


Expression	String	Matched?
a|b--returns occ of a or b
 [aT] ==== a|b|c|d

a T  ==   a|T

abc--2 matches( a,b)
	
cde	No match
ade	1 match (match at ade)
acdbea	3 matches (at acdbea)


15.

() - Group

Parentheses () is used to group sub-patterns. 
For example, (a|b|c)xz match any string that matches 
either a or b or c followed by xz

Expression	String	Matched?
(a|b|c)xz	
ab xz	No match
abxz	1 match (match at abxz)
axz cabxz	2 matches (at axzbc cabxz)

16.

\ - Backslash

Backlash \ is used to escape various characters including 
all metacharacters. For example,

\$a match if a string contains $ followed by a. 
Here, $ is not interpreted by a RegEx engine in a special way.

If you are unsure if a character has special meaning or not, 
you can put \ in front of it.
This makes sure the character is not treated in a special way.

17.

\A - Matches if the specified characters 
are at the start of a string.
\A  --- same as ^
Expression	String	Matched?
\Athe	the sun	Match
In the sun	No match

18.
\b - Matches if the specified characters 
are at the beginning or end of a word.

Expression	String	Matched?
\bfoo	
football	Match
a football	Match
afootball	No match
foo\b	
the foo	Match
the afoo test	Match
the afootest	No match

19.

\B - Opposite of \b. Matches 
if the specified characters are not at 
the beginning or end of a word.

Expression	String	Matched?
\Bfoo	
football	No match
a football	No match
afootball	Match
foo\B	
the foo	No match
the afoo test	No match
the afootest	Match
20.

\D - Matches any non-decimal digit. 
Equivalent to [^0-9]

Expression	String	Matched?
\D	1ab34"50	3 matches (at 1ab34"50)
1345	No match


\d - Matches any decimal digit. Equivalent to [0-9]

Expression	String	Matched?
\d{2,3}	
12abc3	3 matches (at 12abc3)
Python	No match


21.

\s - Matches where a string contains any whitespace character. Equivalent to [ \t\n\r\f\v].

Expression	String	Matched?
\s	
Python RegEx	1 match
PythonRegEx	No match

22.
\S - Matches where a string contains any non-whitespace character. Equivalent to [^ \t\n\r\f\v].

Expression	String	Matched?
\S	a b	2 matches (at  a b)
   	No match

23.

\w - Matches any alphanumeric 
character (digits and alphabets). 
Equivalent to [a-zA-Z0-9_]. By the way, underscore _ is also considered an alphanumeric character.

Expression	String	Matched?
\w	12&": ;c 	3 matches (at 12&": ;c)
%"> !	No match

24.

\W - Matches any non-alphanumeric character. Equivalent to [^a-zA-Z0-9_]

Expression	String	Matched?
\W	1a2%c	1 match (at 1a2%c)
Python	No match

25.

\Z - Matches if the specified characters are at the end of a string.

Expression	String	Matched?
Python\Z	I like Python	1 match
I like Python Programming	No match
Python is fun.	No match


26.

re.findall()
The re.findall() method returns a list of strings containing all matches.

Example 1: re.findall()

# Program to extract numbers from a string

import re

string = 'hello 12 hi 89. Howdy 34'
pattern = '\d+'

result = re.findall(pattern, string) 
print(result)

# Output: ['12', '89', '34']
If the pattern is not found, re.findall() returns an empty list.


27.


re.split()
The re.split method splits the string where there is a match and returns a list of strings where the splits have occurred.

Example 2: re.split()

import re

string = 'Twelve:12 Eighty nine:89.'
pattern = '\d+'

result = re.split(pattern, string) 
print(result)

# Output: ['Twelve:', ' Eighty nine:', '.']

If the pattern is not found, re.split() returns a list containing the original string.



28.


# Program to remove all whitespaces
import re

# multiline string
string = 'abc 12\ de 23 \n f45 6'

# matches all whitespace characters
pattern = '\s+'

# empty string
replace = ''

new_string = re.sub(pattern, replace, string) 
print(new_string)

# Output: abc12de23f456



You can pass count as a fourth parameter to the re.sub() method. If omited, it results to 0. This will replace all occurrences.


import re

# multiline string
string = 'abc 12\
de 23 \n f45 6'

# matches all whitespace characters
pattern = '\s+'
replace = ''

new_string = re.sub(r'\s+', replace, string, 1) 
print(new_string)

# Output:
# abc12de 23
# f45 6
29.

re.subn()
The re.subn() is similar to re.sub() except it returns a tuple of 2 items containing the new string and the number of substitutions made

# Program to remove all whitespaces
import re

# multiline string
string = 'abc 12\ de 23 \n f45 6'

# matches all whitespace characters
pattern = '\s+'

# empty string
replace = ''

new_string = re.subn(pattern, replace, string)
print(new_string)

# Output: ('abc12de23f456', 4)


30.


import re

string = "Phon is fun"

# check if 'Python' is at the beginning
match = re.search('\APython', string)
print(match)
if match:
  print("pattern found inside the string")
else:
  print("pattern not found")

# Output: pattern found inside the string


31.

match.group()
The group() method returns the part of the string 
where there is a match.

Example 6: Match object

import re

string = '39801 356, 2102 1111'

# Three digit number followed by space followed by two digit number
pattern = '(\d{3}) (\d{2})'

# match variable contains a Match object.
match = re.search(pattern, string) 

if match:
  print(match.group())
else:
  print("pattern not found")

print(match.start())
print(match.end())
print(match.span())


# Output: 801 35
Here, match variable contains a match object.

Our pattern (\d{3}) (\d{2}) has two subgroups (\d{3}) and (\d{2}). You can get the part of the string of these parenthesized subgroups. Here's how:

>>> match.group(1)
'801'

>>> match.group(2)
'35'
>>> match.group(1, 2)
('801', '35')

>>> match.groups()
('801', '35')


32.


match.start(), match.end() and match.span()
The start() function returns the index of the start of the matched substring. Similarly, end() returns the end index of the matched substring.

>>> match.start()
2
>>> match.end()
8
The span() function returns a tuple containing start and end index of the matched part.

>>> match.span()
(2, 8)
match.re and match.string
The re attribute of a matched object returns a regular expression object. Similarly, string attribute returns the passed string.

>>> match.re
re.compile('(\\d{3}) (\\d{2})')

>>> match.string
'39801 356, 2102 1111'
33.

# A Python program to demonstrate working of re.match().
import re

# Lets use a regular expression to match a date string
# in the form of Month name followed by day number
regex = r"([a-zA-Z]+) (\d+)"

match = re.search(regex, "I was born on June 24")

if match != None:

	# We reach here when the expression "([a-zA-Z]+) (\d+)"
	# matches the date string.

	# This will print [14, 21), since it matches at index 14
	# and ends at 21.
	print ("Match at index %s, %s" % (match.start(), match.end()))

	# We us group() method to get all the matches and
	# captured groups. The groups contain the matched values.
	# In particular:
	# match.group(0) always returns the fully matched string
	# match.group(1) match.group(2), ... return the capture
	# groups in order from left to right in the input string
	# match.group() is equivalent to match.group(0)

	# So this will print "June 24"
	print ("Full match: %s" % (match.group(0)))

	# So this will print "June"
	print ("Month: %s" % (match.group(1)))

	# So this will print "24"
	print ("Day: %s" % (match.group(2)))

else:
	print ("The regex pattern does not match.")


34.

# A Python program to demonstrate working
# of re.match().
import re


# a sample function that uses regular expressions
# to find month and day of a date.
def findMonthAndDate(string):
    regex = r"([a-zA-Z]+) (\d+)"
    match = re.match(regex, string)

    if match == None:
        print("Not a valid date")
        return

    print("Given Data: %s" % (match.group()))
    print("Month: %s" % (match.group(1)))
    print("Day: %s" % (match.group(2)))


# Driver Code
findMonthAndDate("Jun 24")
print("")
findMonthAndDate("June 24")


35.

# A Python program to demonstrate working of
# findall()
import re

# A sample text string where regular expression
# is searched.
string = """1ab34"50"""

# A sample regular expression to find digits.
regex = '\D'

match = re.findall(regex, string)
print(match)

# This example is contributed by Ayush Saluja.

36.

import re

f=open('C://Users//1698480//Desktop//python.txt','r')

s=f.readlines()
print(s)

# Three digit number followed by space followed by two digit number
pattern = '(\d{2})'
a=[]
for i in s:

# match variable contains a Match object.
 match = re.findall(pattern,i)
 if match:
  a.append(match)
 else:
   pass
print(a)
f.close()


