1.Collections

Counter

https://www.geeksforgeeks.org/counters-in-python-set-1/

# A Python program to show different ways to create
# Counter
from collections import Counter

# With sequence of items
print(Counter(['B','B','A','B','C','A','B','B','A','C']))

# with dictionary
print(Counter({'A':3, 'B':5, 'C':2}))

# with keyword arguments
print(Counter(A=3, B=5, C=2))

# A Python program to demonstrate update()
from collections import Counter
coun = Counter()

coun.update([1, 2, 3, 1, 2, 1, 1, 2])
print(coun)

coun.update([1, 2, 4])
print(coun)

# An example program where different list items are
# counted using counter
from collections import Counter

# Create a list
z = ('blue', 'red', 'blue', 'yellow', 'blue', 'red')

# Count distinct elements and print Counter aobject
print(Counter(z))


OrderDict

# A Python program to demonstrate working of OrderedDict
from collections import OrderedDict

print("This is a Dict:\n")
d = {}
d['a'] = 1
d['b'] = 2
d['c'] = 3
d['d'] = 4

for key, value in d.items():
	print(key, value)

print("\nThis is an Ordered Dict:\n")
od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3
od['d'] = 4

for key, value in od.items():
	print(key, value)


# A Python program to demonstrate working of key
# value change in OrderedDict
from collections import OrderedDict

print("Before:\n")
od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3
od['d'] = 4
for key, value in od.items():
	print(key, value)

print("\nAfter:\n")
od['c'] = 5
for key, value in od.items():
	print(key, value)

# A Python program to demonstrate working of deletion
# re-insertion in OrderedDict
from collections import OrderedDict

print("Before deleting:\n")
od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3
od['d'] = 4

for key, value in od.items():
	print(key, value)

print("\nAfter deleting:\n")
od.pop('c')
for key, value in od.items():
	print(key, value)

print("\nAfter re-inserting:\n")
od['c'] = 3
for key, value in od.items():
	print(key, value)


UserList

# Python program to demonstrate
# userlist


from collections import UserList


L = [1, 2, 3, 4]

# Creating a userlist
userL = UserList(L)
print(userL.data)


# Creating empty userlist
userL = UserList()
print(userL.data)


# Python program to demonstrate
# userlist


from collections import UserList


# Creating a List where
# deletion is not allowed
class MyList(UserList):
	
	# Function to stop deletion
	# from List
	def remove(self, s = None):
		raise RuntimeError("Deletion not allowed")
		
	# Function to stop pop from
	# List
	def pop(self, s = None):
		raise RuntimeError("Deletion not allowed")
	
# Driver's code
L = MyList([1, 2, 3, 4])

print("Original List")

# Inserting to List"
L.append(5)
print("After Insertion")
print(L)

# Deleting From List
L.remove()


userdict

# Python program to demonstrate
# userdict


from collections import UserDict


d = {'a':1,
	'b': 2,
	'c': 3}

# Creating an UserDict
userD = UserDict(d)
print(userD.data)


# Creating an empty UserDict
userD = UserDict()
print(userD.data)


# Python program to demonstrate
# userdict


from collections import UserDict


# Creating a Dictionary where
# deletion is not allowed
class MyDict(UserDict):
	
	# Function to stop deletion
	# from dictionary
	def __del__(self):
		raise RuntimeError("Deletion not allowed")
		
	# Function to stop pop from
	# dictionary
	def pop(self, s = None):
		raise RuntimeError("Deletion not allowed")
		
	# Function to stop popitem
	# from Dictionary
	def popitem(self, s = None):
		raise RuntimeError("Deletion not allowed")
	
# Driver's code
d = MyDict({'a':1,
	'b': 2,
	'c': 3})

print("Original Dictionary")
print(d)

d.pop(1)


Deque

# Python code to demonstrate deque
	
	
from collections import deque
	
# Declaring deque
queue = deque(['name','age','DOB'])
	
print(queue)


# Python code to demonstrate working of
# append(), appendleft(), pop(), and popleft()

# importing "collections" for deque operations
import collections

# initializing deque
de = collections.deque([1,2,3])

# using append() to insert element at right end
# inserts 4 at the end of deque
de.append(4)

# printing modified deque
print ("The deque after appending at right is : ")
print (de)

# using appendleft() to insert element at left end
# inserts 6 at the beginning of deque
de.appendleft(6)

# printing modified deque
print ("The deque after appending at left is : ")
print (de)

# using pop() to delete element from right end
# deletes 4 from the right end of deque
de.pop()

# printing modified deque
print ("The deque after deleting from right is : ")
print (de)

# using popleft() to delete element from left end
# deletes 6 from the left end of deque
de.popleft()

# printing modified deque
print ("The deque after deleting from left is : ")
print (de)


# Python code to demonstrate working of
# insert(), index(), remove(), count()

# importing "collections" for deque operations
import collections

# initializing deque
de = collections.deque([1, 2, 3, 3, 4, 2, 4])

# using index() to print the first occurrence of 4
print ("The number 4 first occurs at a position : ")
print (de.index(4,2,5))

# using insert() to insert the value 3 at 5th position
de.insert(4,3)

# printing modified deque
print ("The deque after inserting 3 at 5th position is : ")
print (de)

# using count() to count the occurrences of 3
print ("The count of 3 in deque is : ")
print (de.count(3))

# using remove() to remove the first occurrence of 3
de.remove(3)

# printing modified deque
print ("The deque after deleting first occurrence of 3 is : ")
print (de)


# Python code to demonstrate working of
# extend(), extendleft(), rotate(), reverse()

# importing "collections" for deque operations
import collections

# initializing deque
de = collections.deque([1, 2, 3,])

# using extend() to add numbers to right end
# adds 4,5,6 to right end
de.extend([4,5,6])

# printing modified deque
print ("The deque after extending deque at end is : ")
print (de)

# using extendleft() to add numbers to left end
# adds 7,8,9 to left end
de.extendleft([7,8,9])

# printing modified deque
print ("The deque after extending deque at beginning is : ")
print (de)

# using rotate() to rotate the deque
# rotates by 3 to left
de.rotate(-3)

# printing modified deque
print ("The deque after rotating deque is : ")
print (de)

# using reverse() to reverse the deque
de.reverse()

# printing modified deque
print ("The deque after reversing deque is : ")
print (de)


UserString

# Python program to demonstrate
# userstring


from collections import UserString


d = 12344

# Creating an UserDict
userS = UserString(d)
print(userS.data)


# Creating an empty UserDict
userS = UserString("")
print(userS.data)


# Python program to demonstrate
# userstring


from collections import UserString


# Creating a Mutable String
class Mystring(UserString):
	
	# Function to append to
	# string
	def append(self, s):
		self.data += s
		
	# Function to remove from
	# string
	def remove(self, s):
		self.data = self.data.replace(s, "")
	
# Driver's code
s1 = Mystring("Geeks")
print("Original String:", s1.data)

# Appending to string
s1.append("s")
print("String After Appending:", s1.data)

# Removing from string
s1.remove("e")
print("String after Removing:", s1.data)


NamedTuple

# Python code to demonstrate namedtuple()

from collections import namedtuple

# Declaring namedtuple()
Student = namedtuple('Student', ['name', 'age', 'DOB'])

# Adding values
S = Student('Nandini', '19', '2541997')
W = Student('Nandini', '21', '2541997')
# Access using index
print("The Student age using index is : ", end="")
print(W[1])

# Access using name
print("The Student name using keyname is : ", end="")
print(S.name)


# Python code to demonstrate namedtuple() and
# Access by name, index and getattr()

# importing "collections" for namedtuple()
import collections

# Declaring namedtuple()
Student = collections.namedtuple('Student', ['name', 'age', 'DOB'])

# Adding values
S = Student('Nandini', '19', '2541997')

# Access using index
print("The Student age using index is : ", end="")
print(S[1])

# Access using name
print("The Student name using keyname is : ", end="")
print(S.name)

# Access using getattr()
print("The Student DOB using getattr() is : ", end="")
print(getattr(S, 'DOB'))




2.Python datetime
Python has a module named datetime to work with dates and times

One of the classes defined in the datetime module is datetime class. 
We then used now() method to create a datetime object containing the current local date and time.

import datetime

datetime_object = datetime.datetime.now()
print(datetime_object)


import datetime

date_object = datetime.date.today()
print(date_object)

datetime.date Class
You can instantiate date objects from the date class. A date object represents a date (year, month and day).

Example 3: Date object to represent a date

import datetime
date is a class of module datetime
every class has a constructor
d = datetime.date(2019, 4, 13)
print(d)


import z-all class in module z
from z import a -- only a from z is imported
from datetime import date

a = date(2019, 4, 13)
print(a)


from datetime import date

# date object of today's date
today = date.today()

print("Current year:", today.year)
print("Current month:", today.month)
print("Current day:", today.day)

from datetime import time

# time(hour = 0, minute = 0, second = 0)
a = time()
print("a =", a)

# time(hour, minute and second)
b = time(11, 34, 56)
print("b =", b)

# time(hour, minute and second)
c = time(hour = 11, minute = 34, second = 56)
print("c =", c)

# time(hour, minute, second, microsecond)
d = time(11, 34, 56, 234566)
print("d =", d)


from datetime import time

a = time(11, 34, 56)

print("hour =", a.hour)
print("minute =", a.minute)
print("second =", a.second)
print("microsecond =", a.microsecond)

from datetime import datetime

#datetime(year, month, day)
a = datetime(2018, 11, 28)
print(a)

# datetime(year, month, day, hour, minute, second, microsecond)
b = datetime(2017, 11, 28, 23, 55, 59, 342380)
print(b)


from datetime import datetime

a = datetime(2017, 11, 28, 23, 55, 59, 342380)
print("year =", a.year)
print("month =", a.month)
print("hour =", a.hour)
print("minute =", a.minute)
print("timestamp =", a.timestamp())


datetime.timedelta
A timedelta object represents the 
difference between two dates or times.

Example 11: Difference between two dates and times

from datetime import datetime, date

t1 = date(year = 2018, month = 7, day = 12)
t2 = date(year = 2017, month = 12, day = 23)
t3 = t1 - t2
print("t3 =", t3)

t4 = datetime(year = 2018, month = 7, day = 12, hour = 7, minute = 9, second = 33)
t5 = datetime(year = 2019, month = 6, day = 10, hour = 5, minute = 55, second = 13)
t6 = t4 - t5
print("t6 =", t6)

print("type of t3 =", type(t3)) 
print("type of t6 =", type(t6))  


from datetime import datetime, date

t1 = date(year = 2018, month = 7, day = 12)
t2 = date(year = 2017, month = 12, day = 23)
t3 = t1 - t2
print("t3 =", t3)

t4 = datetime(year = 2018, month = 7, day = 12, hour = 7, minute = 9, second = 33)
t5 = datetime(year = 2019, month = 6, day = 10, hour = 5, minute = 55, second = 13)
t6 = t5 - t4
print("t6 =", t6)

print("type of t3 =", type(t3)) 
print("type of t6 =", type(t6))  


from datetime import timedelta

t1 = timedelta(weeks = 2, days = 5, hours = 1, seconds = 33)
t2 = timedelta(days = 4, hours = 11, minutes = 4, seconds = 54)
t3 = t1 - t2

print("t3 =", t3)



from datetime import timedelta

t1 = timedelta(seconds = 33)
t2 = timedelta(seconds = 54)
t3 = t1 - t2

print("t3 =", t3)
print("t3 =", abs(t3))



from datetime import timedelta

t = timedelta(days = 5, hours = 1, seconds = 33, microseconds = 233423)
print("total seconds =", t.total_seconds())







from datetime import datetime

# current date and time
now = datetime.now()

t = now.strftime("%H:%M:%S")
print("time:", t)
strftime--time to string
M-minutes
m-months
s1 = now.strftime("%m/%d/%Y, %H:%M:%S")
# mm/dd/YY H:M:S format
print("s1:", s1)

s2 = now.strftime("%d/%m/%Y, %H:%M:%S")
# dd/mm/YY H:M:S format
print("s2:", s2)

%Y - year [0001,..., 2018, 2019,..., 9999]
%m - month [01, 02, ..., 11, 12]
%d - day [01, 02, ..., 30, 31]
%H - hour [00, 01, ..., 22, 23
%M - minute [00, 01, ..., 58, 59]
%S - second [00, 01, ..., 58, 59]



from datetime import datetime

date_string = "21 June, 2018"
print("date_string =", date_string)

date_object = datetime.strptime(date_string, "%d %B, %Y")
print("date_object =", date_object)



3.Requests

https://www.geeksforgeeks.org/python-requests-tutorial/#:~:text=Python%20requests%20module%20has%20several,a%20client%20and%20a%20server.

pip install requests

https://www.edureka.co/blog/python-requests-tutorial/

https://www.geeksforgeeks.org/response-methods-python-requests/
https://www.geeksforgeeks.org/get-method-python-requests/
https://www.geeksforgeeks.org/get-post-requests-using-python/
https://www.geeksforgeeks.org/post-method-python-requests/
https://appdividend.com/2022/03/20/python-requests-post/
https://www.w3schools.com/python/module_requests.asp


https://www.geeksforgeeks.org/get-method-python-requests/
https://www.geeksforgeeks.org/post-method-python-requests/



4.BS

https://www.geeksforgeeks.org/implementing-web-scraping-python-beautiful-soup/
https://www.analyticsvidhya.com/blog/2021/06/web-scraping-with-python-beautifulsoup-library/

#Beautiful Soap

import pandas as pd
import requests
from bs4 import BeautifulSoup as bs

# Define the base URL
base_url = "https://www.consumeraffairs.com/food/dominos.html"

# Create an empty list to store all review
all_pages_reviews =[]

# Create a Scraper function
def scraper():
	# Web scraping - fetching the reviews from the webpage using BeautifulSoup

	# loop through a range of page numbers 
	for i in range(1,6): # fetching reviews from five pages

		# Creating an empty list to store the reviews of each page
		pagewise_reviews = [] 

		# Query parameter
		query_parameter = "?page="+str(i)

		# Constructing the URL
		url = base_url + query_parameter
		
		# Send HTTP request to the URL
		response = requests.get(url)

		# Create a soup object and parse the HTML page
		soup = bs(response.content, 'html.parser') 

		# Finding all the elements having reviews using class attribute
		rev_div = soup.findAll("div",attrs={"class","rvw-bd"}) 

		# loop through all the divs and append 
		for j in range(len(rev_div)):
			# finding all the p tags to fetch only the review text
			pagewise_reviews.append(rev_div[j].find("p").text)

		# writing all the reviews into a list
		for k in range(len(pagewise_reviews)):
			all_pages_reviews.append(pagewise_reviews[k]) 

	# return the final list of reviews
	return all_pages_reviews

# Driver code
reviews = scraper()

# Storing in a dataframe
i = range(1, len(reviews)+1)
reviews_df = pd.DataFrame({'review':reviews}, index=i)

# Writing to a text file
reviews_df.to_csv('reviews.txt', sep='\t')


