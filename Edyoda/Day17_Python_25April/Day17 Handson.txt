1.
# A simple Python function

def fun():
print("Welcome to GFG")

2.
# A simple Python function

def fun():
print("Welcome to GFG")
		
# Driver code to call a function
fun()

3.

# A simple Python function to check
# whether x is even or odd


def evenOdd(x):
	if (x % 2 == 0):
		print("even")
	else:
		print("odd")


# Driver code to call the function
evenOdd(2)
evenOdd(3)

4.
# Python program to demonstrate
# default arguments


def myFun(x, y=50):
	print("x: ", x)
	print("y: ", y)


# Driver code (We call myFun() with only
# argument)
myFun(10)

5.
# Python program to demonstrate Keyword Arguments
def student(firstname, lastname):
	print(firstname, lastname)


# Keyword arguments
student(firstname='Geeks', lastname='Practice')
student(lastname='Practice', firstname='Geeks')

6.

# Python program to illustrate
# *kwargs for variable number of keyword arguments


def myFun(**kwargs):
	for key, value in kwargs.items():
		print(key, value)


# Driver code
myFun(name="Sagar",first='Geeks', mid='for', last='Geeks')


7.
# Python program to illustrate
# *args for variable number of arguments


def myFun(*argv):
	for arg in argv:
		print(arg)


myFun('Hello', 'Welcome', 'to', 'GeeksforGeeks')

8.
def square_value(num):
	"""This function returns the square
	value of the entered number"""
	return num**2


print(square_value(2))
print(square_value(-4))

9.
# Here x is a new reference to same list lst
def myFun(x):
	x[0] = 20


# Driver Code (Note that lst is modified
# after function call.
lst = [10, 11, 12, 13, 14, 15]
myFun(lst)
print(lst)

10.

When we pass a reference and change the received reference to something else,
the connection between the passed and received parameter is broken. For example, consider the below program.
 


def myFun(x):
 
    # After below line link of x with previous
    # object gets broken. A new object is assigned
    # to x.
    x = [20, 30, 40]
 
 
# Driver Code (Note that lst is not modified
# after function call.
lst = [10, 11, 12, 13, 14, 15]
myFun(lst)
print(lst)

11.
def myFun(x):

	# After below line link of x with previous
	# object gets broken. A new object is assigned
	# to x.
	x = 20


# Driver Code (Note that lst is not modified
# after function call.
x = 10
myFun(x)
print(x)


12.

def swap(x, y):
	temp = x
	x = y
	y = temp


# Driver code
x = 2
y = 3
swap(x, y)
print(x)
print(y)

13.

# Python code to illustrate the cube of a number
# using lambda function


def cube(x): return x*x*x

cube_v2 = lambda x : x*x*x

print(cube(7))
print(cube_v2(7))

14.

# Python program to
# demonstrate accessing of
# variables of nested functions

def f1():
	s = 'I love GeeksforGeeks'
	
	def f2():
		print(s)
		
	f2()

# Driver's code
f1()


15.# Note: You may get different values for the id

a = 2
print('id(a) =', id(a))

a = a+1
print('id(a) =', id(a))

print('id(3) =', id(3))

b = 2
print('id(b) =', id(b))
print('id(2) =', id(2))

16.

def outer_function():
    a = 20
    print(a,id(a))

    def inner_function():
        a = 30
        print(a,id(a))

        print('a =', a)

    inner_function()
    print('a =', a)
    print(a,id(a))



a = 10
print(a,id(a))

outer_function()
print('a =', a)
print(a,id(a))

Here, the variable a is in the global namespace. Variable b is in the local namespace of outer_function() and 
c is in the nested local namespace of inner_function().

When we are in inner_function(), c is local to us, b is nonlocal and a is global. We can read as well as assign new values to c but can only read b and a from inner_function().

If we try to assign as a value to b, a new variable b is created in the local namespace which is different than the 
nonlocal b. The same thing happens when we assign a value to a.

However, if we declare a as global, all the reference and assignment go to the global a. Similarly, if we want to rebind the 
variable b, it must be declared as nonlocal. The following example will further clarify this.
17.

def outer_function():
    global a
    a = 20
    print(a, id(a))
    def inner_function():
        global a
        a = 30
        print(a, id(a))
        print('a =', a)
    inner_function()
    print('a =', a)
    print(a, id(a))
a = 10
print(a,id(a))
outer_function()
print('a =', a)
18.
def x():
	
	a = 9
	print(a, id(a))

x()
a=10
print(a,id(a))
x()
print(a,id(a))

9 1191835533808
10 1191835533840
9 1191835533808
10 1191835533840

19.
def x():
    global a
    a = 9
    print(a, id(a))


x()
global a
a = 10
print(a, id(a))
x()
print(a, id(a))

9 2293959688688
10 2293959688720
9 2293959688688
9 2293959688688

20.

21.

22.

23.

24.

25.

26.

27.

28.

29.

30.


