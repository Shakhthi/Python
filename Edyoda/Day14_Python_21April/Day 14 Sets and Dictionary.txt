Sets

1.
# Python program to
# demonstrate sets

# Same as {"a", "b", "c"}
myset = set(["a", "b", "c"])
print(myset)

# Adding element to the set
myset.add("d")
print(myset)


3.
# A Python program to
# demonstrate adding elements
# in a set

# Creating a Set
people = {"Jay", "Idrish", "Archi"}

print("People:", end = " ")
print(people)

# This will add Daxit
# in the set
people.add("Daxit")

# Adding elements to the
# set using iterator
for i in range(1, 6):
	people.add(i)

print("\nSet after adding element:", end = " ")
print(people)

4.

# Python Program to
# demonstrate union of
# two sets

people = {"Jay", "Idrish", "Archil"}
vampires = {"Karan", "Arjun"}
dracula = {"Deepanshu", "Raju"}

# Union using union()
# function
population = people.union(vampires)

print("Union using union() function")
print(population)

# Union using "|"
# operator
population = people|dracula

print("\nUnion using '|' operator")
print(population)

5.
# Python program to
# demonstrate intersection
# of two sets

set1 = set()
set2 = set()

for i in range(5):
	set1.add(i)

for i in range(3,9):
	set2.add(i)

# Intersection using
# intersection() function
set3 = set1.intersection(set2)

print("Intersection using intersection() function")
print(set3)

# Intersection using
# "&" operator
set3 = set1 & set2

print("\nIntersection using '&' operator")
print(set3)

6.
# Python program to
# demonstrate difference
# of two sets

set1 = set()
set2 = set()

for i in range(5):
	set1.add(i)

for i in range(3,9):
	set2.add(i)

# Difference of two sets
# using difference() function
set3 = set1.difference(set2)

print(" Difference of two sets using difference() function")
print(set3)

# Difference of two sets
# using '-' operator
set3 = set1 - set2

print("\nDifference of two sets using '-' operator")
print(set3)

7.
# Python program to
# demonstrate clearing
# of set

set1 = {1,2,3,4,5,6}

print("Initial set")
print(set1)

# This method will remove
# all the elements of the set
set1.clear()

print("\nSet after using clear() function")
print(set1)

8.
# Python program to demonstrate working# of
# Set in Python

# Creating two sets
set1 = set()
set2 = set()

# Adding elements to set1
for i in range(1, 6):
	set1.add(i)

# Adding elements to set2
for i in range(3, 8):
	set2.add(i)

print("Set1 = ", set1)
print("Set2 = ", set2)
print("\n")

# Union of set1 and set2
set3 = set1 | set2# set1.union(set2)
print("Union of Set1 & Set2: Set3 = ", set3)

# Intersection of set1 and set2
set4 = set1 & set2# set1.intersection(set2)
print("Intersection of Set1 & Set2: Set4 = ", set4)
print("\n")

# Checking relation between set3 and set4
if set3 > set4: # set3.issuperset(set4)
	print("Set3 is superset of Set4")
else if set3 < set4: # set3.issubset(set4)
	print("Set3 is subset of Set4")
else : # set3 == set4
	print("Set3 is same as Set4")

# displaying relation between set4 and set3
if set4 < set3: # set4.issubset(set3)
	print("Set4 is subset of Set3")
	print("\n")

# difference between set3 and set4
set5 = set3 - set4
print("Elements in Set3 and not in Set4: Set5 = ", set5)
print("\n")

# check if set4 and set5 are disjoint sets
if set4.isdisjoint(set5):
	print("Set4 and Set5 have nothing in common\n")

# Removing all the values of set5
set5.clear()

print("After applying clear on sets Set5: ")
print("Set5 = ", set5)

9.
# Different types of sets in Python
# set of integers
my_set = {1, 2, 3}
print(my_set)

# set of mixed datatypes
my_set = {1.0, "Hello", (1, 2, 3)}
print(my_set)

10.

# Distinguish set and dictionary while creating empty set

# initialize a with {}
a = {}

# check data type of a
print(type(a))

# initialize a with set()
a = set()

# check data type of a
print(type(a))

11.

# initialize my_set
my_set = {1, 3}
print(my_set)

# my_set[0]
# if you uncomment the above line
# you will get an error
# TypeError: 'set' object does not support indexing

# add an element
# Output: {1, 2, 3}
my_set.add(2)
print(my_set)

# add multiple elements
# Output: {1, 2, 3, 4}
my_set.update([2, 3, 4])
print(my_set)

# add list and set
# Output: {1, 2, 3, 4, 5, 6, 8}
my_set.update([4, 5], {1, 6, 8})
print(my_set)
12.

# Difference between discard() and remove()

# initialize my_set
my_set = {1, 3, 4, 5, 6}
print(my_set)

# discard an element
# Output: {1, 3, 5, 6}
my_set.discard(4)
print(my_set)

# remove an element
# Output: {1, 3, 5}
my_set.remove(6)
print(my_set)

# discard an element
# not present in my_set
# Output: {1, 3, 5}
my_set.discard(2)
print(my_set)

# remove an element
# not present in my_set
# you will get an error.
# Output: KeyError

my_set.remove(2)
13.
# initialize my_set
# Output: set of unique elements
my_set = set("HelloWorld")
print(my_set)

# pop an element
# Output: random element
print(my_set.pop())

# pop another element
my_set.pop()
print(my_set)

# clear my_set
# Output: set()
my_set.clear()
print(my_set)

print(my_set)
14.
# Symmetric difference of two sets
# initialize A and B
A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}

# use ^ operator
# Output: {1, 2, 3, 6, 7, 8}
print(A ^ B)

15.
# in keyword in a set
# initialize my_set
my_set = set("apple")

# check if 'a' is present
# Output: True
print('a' in my_set)

# check if 'p' is present
# Output: False
print('p' not in my_set)
16.

numbers = {2, 3, 4, 5}

numbers.discard(3)
print('numbers = ', numbers)

numbers.discard(10)
print('numbers = ', numbers)
17.

A = {1, 2, 3, 4}
B = {5, 6, 7}
C = {4, 5, 6}

print('Are A and B disjoint?', A.isdisjoint(B))
print('Are A and C disjoint?', A.isdisjoint(C))

18.
A = {1, 2, 3}
B = {1, 2, 3, 4, 5}
C = {1, 2, 4, 5}

# Returns True
print(A.issubset(B))

# Returns False
# B is not subset of A
print(B.issubset(A))

# Returns False
print(A.issubset(C))

# Returns True
print(C.issubset(B))

19.

A = {1, 2, 3, 4, 5}
B = {1, 2, 3}
C = {1, 2, 3}

# Returns True
print(A.issuperset(B))

# Returns False
print(B.issuperset(A))

# Returns True
print(C.issuperset(B))

20.
languages = {'Python', 'Java', 'English'}

# remove English from the set
languages.remove('English')


print(languages)

# Output: {'Python', 'Java'}

21.
A = {'a', 'b', 'c', 'd'}
B = {'c', 'd', 'e' }
C = {}

print(A.symmetric_difference(B))
print(B.symmetric_difference(A))

print(A.symmetric_difference(C))
print(B.symmetric_difference(C))

22.
A = {'a', 'b'}
B = {1, 2, 3}

result = A.update(B)

print('A =', A)
print('result =', result)
23.
grocery = ['bread', 'milk', 'butter']
enumerateGrocery = enumerate(grocery)

print(type(enumerateGrocery))

# converting to list
print(list(enumerateGrocery))

# changing the default counter
enumerateGrocery = enumerate(grocery, 10)
print(list(enumerateGrocery))
24.

languages = ['Python', 'Java', 'JavaScript']

# compute the length of languages
length = len(languages)
print(length)

# Output: 3
25.

numbers = [9, 34, 11, -4, 27]

# find the maximum number
max_number = max(numbers)
print(max_number)

# Output: 34
26.


Dictionary

1.Python Dictionary copy() method returns a shallow copy of the dictionary.

Python Dictionary copy() Syntax: 
dict.copy()

Python Dictionary copy() Parameters: 
The copy() method doesn’t take any parameters.

Python Dictionary copy() Returns: 
This method doesn’t modify the original, dictionary just returns copy of the dictionary.
# Python program to demonstrate working
# of dictionary copy
original = {1: 'geeks', 2: 'for'}

# copying using copy() function
new = original.copy()

# removing all elements from the list
# Only new list becomes empty as copy()
# does shallow copy.
new.clear()

print('new: ', new)
print('original: ', original)

2.The clear() method removes all items from the dictionary.

Syntax:

dict.clear()
Parameters:

The clear() method doesn't take any parameters.
Returns:

The clear() method doesn't return any value.
Examples:

Input : d = {1: "geeks", 2: "for"}
        d.clear()
Output : d = {}
Error:

As we are not passing any parameters there
is no chance for any error.

# Python program to demonstrate working of
# dictionary clear()
text = {1: "geeks", 2: "for"}

text.clear()
print('text =', text)

3.
Python dictionary pop() method removes and returns the specified element from the dictionary.

Syntax : dict.pop(key, def)

Parameters : 

key : The key whose key-value pair has to be returned and removed.
def : The default value to return if specified key is not present.
Returns : Value associated to deleted key-value pair, if key is present. 
Default value if specified if key is not present. 
KeyError, if key not present and default value not specified. 

# Python 3 code to demonstrate
# working of pop()

# initializing dictionary
test_dict = {"Nikhil": 7, "Akshat": 1, "Akash": 2}

# Printing initial dict
print("The dictionary before deletion : " + str(test_dict))

# using pop to return and remove key-value pair.
pop_ele = test_dict.pop('Akash')

# Printing the value associated to popped key
print("Value associated to poppped key is : " + str(pop_ele))

# Printing dictionary after deletion
print("Dictionary after deletion is : " + str(test_dict))

4.Python dictionary popitem() method removes the last inserted key-value pair from the dictionary and returns it as a tuple.

Syntax : dict.popitem() 

Parameters : None 

Returns : A tuple containing the arbitrary key-value pair from dictionary. That pair is removed from dictionary. 

# Python 3 code to demonstrate
# working of popitem()

# initializing dictionary
test_dict = {"Nikhil": 7, "Akshat": 1, "Akash": 2}

# Printing initial dict
print("The dictionary before deletion : " + str(test_dict))

# using popitem() to return + remove arbitrary
# pair
res = test_dict.popitem()

# Printing the pair returned
print('The arbitrary pair returned is : ' + str(res))

# Printing dict after deletion
print("The dictionary after removal : " + str(test_dict))

5.
Python get() method return the value for the given key if present in the dictionary.
If not, then it will return None (if get() is used with only one argument).

Syntax : Dict.get(key, default=None)

Parameters: 

key: The keyname of the item you want to return the value from
Value: (Optional) Value to be returned if the key is not found. The default value is None.
Returns: Returns the value of the item with the specified key.

Python get() method return the value for the given key if present in the dictionary. If not, then it will return None (if get() is used with only one argument).

Syntax : Dict.get(key, default=None)

Parameters: 

key: The keyname of the item you want to return the value from
Value: (Optional) Value to be returned if the key is not found. The default value is None.
Returns: Returns the value of the item with the specified key.

dic = {"A": 1, "B": 2}
print(dic.get("A"))
print(dic.get("C"))
print(dic.get("C", "Not Found ! "))

6.values() is an inbuilt method in Python programming language that returns a view object. The view object contains the values of the dictionary, as a list. If you use the type() method on the return value, you get “dict_values object”. It must be cast to obtain the actual list.

Syntax:

dictionary_name.values()
Parameters:
There are no parameters

Returns:

returns a list of all the values available in a given dictionary.
the values have been stored in a reversed manner.
Error:

As we are not passing any parameters there
is no scope for any error.

# Python3 program for illustration
# of values() method of dictionary


# numerical values
dictionary = {"raj": 2, "striver": 3, "vikram": 4}
print(dictionary.values())


# string values
dictionary = {"geeks": "5", "for": "3", "Geeks": "5"}
print(dictionary.values())

7.Python Dictionary update() method updates the dictionary with the elements from another dictionary object or from an iterable of key/value pairs.

Syntax: dict.update([other])

Parameters: This method takes either a dictionary or an iterable object of key/value pairs (generally tuples) as parameters.

Returns: It doesn’t return any value but updates the Dictionary with elements from a dictionary object or an iterable object of key/value pairs.

# Python program to show working
# of update() method in Dictionary

# Dictionary with three items
Dictionary1 = {'A': 'Geeks', 'B': 'For', }
Dictionary2 = {'B': 'Geeks'}

# Dictionary before Updation
print("Original Dictionary:")
print(Dictionary1)

# update the value of key 'B'
Dictionary1.update(Dictionary2)
print("Dictionary after updation:")
print(Dictionary1)

8.
Dictionary in Python is a collection of data values which only maintains the order of insertion, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key: value pair.

keys() method in Python Dictionary, returns a view object that displays a list of all the keys in the dictionary in order of insertion.
 

Syntax: dict.keys()
Parameters: There are no parameters.
Returns: A view object is returned that displays all the keys. This view object changes according to the changes in the dictionary.

# Python program to show working
# of keys in Dictionary

# Dictionary with three keys
Dictionary1 = {'A': 'Geeks', 'B': 'For', 'C': 'Geeks'}

# Printing keys of dictionary
print(Dictionary1.keys())

# Creating empty Dictionary
empty_Dict1 = {}

# Printing keys of Empty Dictionary
print(empty_Dict1.keys())

9.Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.
In Python Dictionary, items() method is used to return the list with all dictionary keys with values.

Syntax: dictionary.items()
Parameters: This method takes no parameters.
Returns: A view object that displays a list of a given dictionary’s (key, value) tuple pair.
# Python program to show working
# of items() method in Dictionary

# Dictionary with three items
Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' }

print("Dictionary items:")

# Printing all the items of the Dictionary
print(Dictionary1.items())

10.In Python Dictionary, has_key() method returns true if specified key is present in the dictionary, else returns false. 

Syntax: dict.has_key(key)
Parameters:

key – This is the Key to be searched in the dictionary.
Returns: Method returns true if a given key is available in the dictionary, otherwise it returns a false.

# Python program to show working
# of has_key() method in Dictionary

# Dictionary with three items
Dictionary1 = {'A': 'Geeks', 'B': 'For', 'C': 'Geeks'}

# Dictionary to be checked
print("Dictionary to be checked: ")
print(Dictionary1)

# Use of has_key() to check
# for presence of a key in Dictionary
print(Dictionary1.has_key('A'))
print(Dictionary1.has_key('For'))

11.
Python dictionary fromkeys() function returns the dictionary with key mapped and specific value. It creates a new dictionary from the given sequence with the specific value.

Syntax : fromkeys(seq, val)

Parameters : 

seq : The sequence to be transformed into a dictionary.
val : Initial values that need to be assigned to the generated keys. Defaults to None.
Returns : A dictionary with keys mapped to None if no value is provided, else to the value provided in the field. 


# Python 3 code to demonstrate
# working of fromkeys()

# initializing sequence
seq = {'a', 'b', 'c', 'd', 'e'}

# using fromkeys() to convert sequence to dict
# initializing with None
res_dict = dict.fromkeys(seq)

# Printing created dict
print("The newly created dict with None values : " + str(res_dict))


# using fromkeys() to convert sequence to dict
# initializing with 1
res_dict2 = dict.fromkeys(seq, 1)

# Printing created dict
print("The newly created dict with 1 as value : " + str(res_dict2))

12.

get(key, def_val) :- This function return the key value associated with the key mentioned in arguments. If key is not present, the default value is returned.

# Python code to demonstrate working of
# has_key() and get()

# Initializing dictionary
dict = { 'Name' : 'Nandini', 'Age' : 19 }

# using has_key() to check if dic1 has a key
if dict.has_key('Name'):
	print ("Name is a key")
else : print ("Name is not a key")

# using get() to print a key value
print ("The value associated with ID is : ")
print (dict.get('ID', "Not Present"))

# printing dictionary values
print ("The dictionary values are : ")
print (str(dict))

13.
setdefault(key, def_value) :- This function also searches for a key and 
displays its value like get() but, it creates new key with def_value if key is not present.


# Python code to demonstrate working of
# setdefault()
  
# Initializing dictionary
dict = { 'Name' : 'Nandini', 'Age' : 19 }
  
# using setdefault() to print a key value
print ("The value associated with Age is : ",end="")
print (dict.setdefault('ID', "No ID"))
  
# printing dictionary values
print ("The dictionary values are : ")
print (str(dict))
